#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Buffer1
{
    float4 textureSize;
};

struct type_Buffer2
{
    float blurSize;
};

constant float _77[16] = { 0.059909999370574951171875, 0.077579997479915618896484375, 0.07231999933719635009765625, 0.0647599995136260986328125, 0.0557099990546703338623046875, 0.046039998531341552734375, 0.03655000030994415283203125, 0.02787999995052814483642578125, 0.02041999995708465576171875, 0.014379999600350856781005859375, 0.009720000438392162322998046875, 0.006310000084340572357177734375, 0.003940000198781490325927734375, 0.00236000004224479198455810546875, 0.001359999994747340679168701171875, 0.000750000006519258022308349609375 };
constant float _78[16] = { 0.6655499935150146484375, 2.493710041046142578125, 4.4886798858642578125, 6.483660221099853515625, 8.4786396026611328125, 10.47362041473388671875, 12.46860027313232421875, 14.46360015869140625, 16.458599090576171875, 18.453609466552734375, 20.4486293792724609375, 22.4436492919921875, 24.438690185546875, 26.433750152587890625, 28.42881011962890625, 30.42388916015625 };

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float2 in_var_TEXCOORD1 [[user(locn1)]];
    float4 in_var_TEXCOORD2 [[user(locn2)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Buffer1& Buffer1 [[buffer(0)]], constant type_Buffer2& Buffer2 [[buffer(1)]], texture2d<float> image [[texture(0)]], sampler imageSampler [[sampler(0)]])
{
    main0_out out = {};
    float4 _89;
    _89 = float4(0.0);
    for (int _92 = 0; _92 < 16; )
    {
        float2 _98 = float2(0.0, Buffer2.blurSize * Buffer1.textureSize.w) * _78[_92];
        _89 += ((image.sample(imageSampler, fast::clamp(in.in_var_TEXCOORD1 + _98, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw)) + image.sample(imageSampler, fast::clamp(in.in_var_TEXCOORD1 - _98, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw))) * _77[_92]);
        _92++;
        continue;
    }
    out.out_var_SV_Target0 = _89;
    return out;
}

