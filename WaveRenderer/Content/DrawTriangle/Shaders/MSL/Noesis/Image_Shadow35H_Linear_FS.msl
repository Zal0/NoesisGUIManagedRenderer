#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Buffer0
{
    float opacity;
};

struct type_Buffer1
{
    float4 textureSize;
};

struct type_Buffer2
{
    float4 shadowColor;
    float blurSize;
    packed_float2 shadowOffset;
};

constant float _72[9] = { 0.10854999721050262451171875, 0.13134999573230743408203125, 0.104060001671314239501953125, 0.072159998118877410888671875, 0.0438000001013278961181640625, 0.02328000031411647796630859375, 0.01083000004291534423828125, 0.0044100000523030757904052734375, 0.001569999963976442813873291015625 };
constant float _73[9] = { 0.662930011749267578125, 2.4790399074554443359375, 4.462319850921630859375, 6.445680141448974609375, 8.42916965484619140625, 10.41281032562255859375, 12.39663982391357421875, 14.38070011138916015625, 16.365009307861328125 };

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float2 in_var_TEXCOORD0 [[user(locn0)]];
    float2 in_var_TEXCOORD1 [[user(locn1)]];
    float4 in_var_TEXCOORD2 [[user(locn2)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Buffer0& Buffer0 [[buffer(0)]], constant type_Buffer1& Buffer1 [[buffer(1)]], constant type_Buffer2& Buffer2 [[buffer(2)]], texture2d<float> ramps [[texture(0)]], texture2d<float> image [[texture(1)]], texture2d<float> shadow [[texture(2)]], sampler rampsSampler [[sampler(0)]], sampler imageSampler [[sampler(1)]], sampler shadowSampler [[sampler(2)]])
{
    main0_out out = {};
    float _100;
    _100 = 0.0;
    for (int _103 = 0; _103 < 9; )
    {
        float2 _109 = float2(Buffer2.blurSize * Buffer1.textureSize.z, 0.0) * _73[_103];
        float2 _114 = in.in_var_TEXCOORD1 - float2(Buffer2.shadowOffset[0] * Buffer1.textureSize.z, Buffer2.shadowOffset[1] * Buffer1.textureSize.w);
        _100 += (_72[_103] * (shadow.sample(shadowSampler, fast::clamp(_114 + _109, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw)).w + shadow.sample(shadowSampler, fast::clamp(_114 - _109, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw)).w));
        _103++;
        continue;
    }
    float4 _135 = image.sample(imageSampler, fast::clamp(in.in_var_TEXCOORD1, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw));
    out.out_var_SV_Target0 = (_135 + ((Buffer2.shadowColor * _100) * (1.0 - _135.w))) * (Buffer0.opacity * ramps.sample(rampsSampler, in.in_var_TEXCOORD0).w);
    return out;
}

