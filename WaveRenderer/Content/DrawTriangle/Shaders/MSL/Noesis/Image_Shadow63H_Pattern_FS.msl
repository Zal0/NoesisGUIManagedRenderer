#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Buffer0
{
    float opacity;
};

struct type_Buffer1
{
    float4 textureSize;
};

struct type_Buffer2
{
    float4 shadowColor;
    float2 shadowOffset;
    float blurSize;
};

constant float _86[16] = { 0.059909999370574951171875, 0.077579997479915618896484375, 0.07231999933719635009765625, 0.0647599995136260986328125, 0.0557099990546703338623046875, 0.046039998531341552734375, 0.03655000030994415283203125, 0.02787999995052814483642578125, 0.02041999995708465576171875, 0.014379999600350856781005859375, 0.009720000438392162322998046875, 0.006310000084340572357177734375, 0.003940000198781490325927734375, 0.00236000004224479198455810546875, 0.001359999994747340679168701171875, 0.000750000006519258022308349609375 };
constant float _87[16] = { 0.6655499935150146484375, 2.493710041046142578125, 4.4886798858642578125, 6.483660221099853515625, 8.4786396026611328125, 10.47362041473388671875, 12.46860027313232421875, 14.46360015869140625, 16.458599090576171875, 18.453609466552734375, 20.4486293792724609375, 22.4436492919921875, 24.438690185546875, 26.433750152587890625, 28.42881011962890625, 30.42388916015625 };

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float2 in_var_TEXCOORD0 [[user(locn0)]];
    float2 in_var_TEXCOORD1 [[user(locn1)]];
    float4 in_var_TEXCOORD2 [[user(locn2)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Buffer0& Buffer0 [[buffer(0)]], constant type_Buffer1& Buffer1 [[buffer(1)]], constant type_Buffer2& Buffer2 [[buffer(2)]], texture2d<float> pattern [[texture(0)]], texture2d<float> image [[texture(1)]], texture2d<float> shadow [[texture(2)]], sampler patternSampler [[sampler(0)]], sampler imageSampler [[sampler(1)]], sampler shadowSampler [[sampler(2)]])
{
    main0_out out = {};
    float _114;
    _114 = 0.0;
    for (int _117 = 0; _117 < 16; )
    {
        float2 _123 = float2(Buffer2.blurSize * Buffer1.textureSize.z, 0.0) * _87[_117];
        float2 _128 = in.in_var_TEXCOORD1 - float2(Buffer2.shadowOffset.x * Buffer1.textureSize.z, Buffer2.shadowOffset.y * Buffer1.textureSize.w);
        _114 += (_86[_117] * (shadow.sample(shadowSampler, fast::clamp(_128 + _123, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw)).w + shadow.sample(shadowSampler, fast::clamp(_128 - _123, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw)).w));
        _117++;
        continue;
    }
    float4 _149 = image.sample(imageSampler, fast::clamp(in.in_var_TEXCOORD1, in.in_var_TEXCOORD2.xy, in.in_var_TEXCOORD2.zw));
    out.out_var_SV_Target0 = (_149 + ((Buffer2.shadowColor * _114) * (1.0 - _149.w))) * (Buffer0.opacity * pattern.sample(patternSampler, in.in_var_TEXCOORD0).w);
    return out;
}

