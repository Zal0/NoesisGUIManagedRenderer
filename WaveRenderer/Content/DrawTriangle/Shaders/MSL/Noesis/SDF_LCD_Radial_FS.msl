#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Buffer0
{
    float4 radialGrad[2];
    float opacity;
};

struct type_Buffer1
{
    float4 textureSize;
};

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
    float4 out_var_SV_Target1 [[color(1)]];
};

struct main0_in
{
    float2 in_var_TEXCOORD0 [[user(locn0)]];
    float2 in_var_TEXCOORD1 [[user(locn1)]];
    float2 in_var_TEXCOORD4 [[user(locn2)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Buffer0& Buffer0 [[buffer(0)]], constant type_Buffer1& Buffer1 [[buffer(1)]], texture2d<float> ramps [[texture(0)]], texture2d<float> glyphs [[texture(1)]], sampler rampsSampler [[sampler(0)]], sampler glyphsSampler [[sampler(1)]])
{
    main0_out out = {};
    float _65 = (Buffer0.radialGrad[1].y * in.in_var_TEXCOORD0.x) - (Buffer0.radialGrad[1].z * in.in_var_TEXCOORD0.y);
    float4 _95 = ramps.sample(rampsSampler, float2(((Buffer0.radialGrad[0].x * in.in_var_TEXCOORD0.x) + (Buffer0.radialGrad[0].y * in.in_var_TEXCOORD0.y)) + (Buffer0.radialGrad[0].z * sqrt((((Buffer0.radialGrad[0].w * in.in_var_TEXCOORD0.x) * in.in_var_TEXCOORD0.x) + ((Buffer0.radialGrad[1].x * in.in_var_TEXCOORD0.y) * in.in_var_TEXCOORD0.y)) - (_65 * _65))), Buffer0.radialGrad[1].w));
    float2 _98 = dfdx(in.in_var_TEXCOORD4);
    float2 _103 = (_98 * Buffer1.textureSize.zw) * 0.3333333432674407958984375;
    float _120 = length(_98);
    float _126 = (-0.64999997615814208984375) * (1.0 - ((fast::clamp(1.0 / _120, 0.125, 0.25) - 0.125) * 8.0));
    float _127 = 0.64999997615814208984375 * _120;
    float3 _132 = smoothstep(float3(_126 - _127), float3(_126 + _127), (float3(glyphs.sample(glyphsSampler, (in.in_var_TEXCOORD1 - _103)).x, glyphs.sample(glyphsSampler, in.in_var_TEXCOORD1).x, glyphs.sample(glyphsSampler, (in.in_var_TEXCOORD1 + _103)).x) - float3(0.501960813999176025390625)) * 7.96875);
    float _136 = _132.y;
    out.out_var_SV_Target0 = float4((_95.xyz * Buffer0.opacity) * _132, _136);
    out.out_var_SV_Target1 = float4(_132 * (Buffer0.opacity * _95.w), _136);
    return out;
}

