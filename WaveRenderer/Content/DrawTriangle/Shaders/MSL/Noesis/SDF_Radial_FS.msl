#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Buffer0
{
    float4 radialGrad[2];
    float opacity;
};

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float2 in_var_TEXCOORD0 [[user(locn0)]];
    float2 in_var_TEXCOORD1 [[user(locn1)]];
    float2 in_var_TEXCOORD4 [[user(locn2)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Buffer0& Buffer0 [[buffer(0)]], texture2d<float> ramps [[texture(0)]], texture2d<float> glyphs [[texture(1)]], sampler rampsSampler [[sampler(0)]], sampler glyphsSampler [[sampler(1)]])
{
    main0_out out = {};
    float _57 = (Buffer0.radialGrad[1].y * in.in_var_TEXCOORD0.x) - (Buffer0.radialGrad[1].z * in.in_var_TEXCOORD0.y);
    float _98 = length(dfdx(in.in_var_TEXCOORD4));
    float _104 = (-0.64999997615814208984375) * (1.0 - ((fast::clamp(1.0 / _98, 0.125, 0.25) - 0.125) * 8.0));
    float _105 = 0.64999997615814208984375 * _98;
    out.out_var_SV_Target0 = ramps.sample(rampsSampler, float2(((Buffer0.radialGrad[0].x * in.in_var_TEXCOORD0.x) + (Buffer0.radialGrad[0].y * in.in_var_TEXCOORD0.y)) + (Buffer0.radialGrad[0].z * sqrt((((Buffer0.radialGrad[0].w * in.in_var_TEXCOORD0.x) * in.in_var_TEXCOORD0.x) + ((Buffer0.radialGrad[1].x * in.in_var_TEXCOORD0.y) * in.in_var_TEXCOORD0.y)) - (_57 * _57))), Buffer0.radialGrad[1].w)) * (smoothstep(_104 - _105, _104 + _105, 7.96875 * (glyphs.sample(glyphsSampler, in.in_var_TEXCOORD1).x - 0.501960813999176025390625)) * Buffer0.opacity);
    return out;
}

